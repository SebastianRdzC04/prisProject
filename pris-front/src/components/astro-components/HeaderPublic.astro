---
// Header.astro

// Inicialmente no sabemos si el usuario está autenticado
// Esto se verificará en el cliente mediante JavaScript
const isLoggedIn = false; 
---

<header class="w-full bg-white text-gray-800 shadow-lg fixed top-0 left-0">
    <div class="container mx-auto px-4 py-4">
        <div class="flex items-center justify-between">
            <div>
                <a href="/" class="text-xl font-bold text-gray-800">
                    MediConsulta
                </a>
            </div>
            <div class="flex items-center gap-4">
                <button class="px-4 py-2 bg-gray-800 text-white rounded hover:bg-gray-700 transition-colors">
                    Agendar nueva cita
                </button>

                <!-- Botón de Iniciar sesión (se mostrará cuando no hay token) -->
                <button id="loginButton" class="px-4 py-2 border border-gray-800 text-gray-800 rounded hover:bg-gray-100 transition-colors">
                    Iniciar sesión
                </button>
                
                <!-- Menú de perfil (se mostrará cuando hay token) -->
                <div id="profileSection" class="relative hidden">
                    <button id="profileButton" class="flex items-center gap-2">
                        <span id="userName" class="text-gray-800 font-medium">Usuario</span>
                        <div class="flex items-center justify-center w-10 h-10 bg-gray-200 rounded-full hover:bg-gray-300 transition-colors">
                            <span class="text-gray-600">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z" />
                                </svg>
                            </span>
                        </div>
                    </button>
                    <div id="profileMenu" class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-10 hidden">
                        <a href="/perfil" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Mi perfil</a>
                        <a href="/citas" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Mis citas</a>
                        <hr class="my-1">
                        <a href="#" id="logoutButton" class="block px-4 py-2 text-sm text-red-600 hover:bg-gray-100">Cerrar sesión</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</header>

<script>
    // Función para decodificar el token JWT
    function parseJwt(token) {
        try {
            const base64Url = token.split('.')[1];
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            const payload = decodeURIComponent(atob(base64).split('').map(function(c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(''));

            return JSON.parse(payload);
        } catch (e) {
            console.error('Error decoding token:', e);
            return null;
        }
    }

    // Verificar autenticación desde localStorage
    async function checkAuthentication() {
        const token = localStorage.getItem('token');
        
        if (!token) {
            showLoginButton();
            return;
        }

        try {
            // Verificar si el token es válido
            const verifyResponse = await fetch(`https://apipris.kysedomi.lat/auth/verify?token=${token}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
            });
            console.log('verifyResponse', verifyResponse);
            
            if (verifyResponse.status !== 200) {
                // Token inválido, eliminar y mostrar botón de login
                localStorage.removeItem('token');
                showLoginButton();
                return;
            }
            
            // Token válido, extraer información
            const tokenPayload = parseJwt(token);
            
            if (!tokenPayload || !tokenPayload.id) {
                console.error('Token payload is invalid');
                showLoginButton();
                return;
            }
            
            const userId = tokenPayload.id;
            const isAdmin = tokenPayload.is_admin === true;
            
            // Obtener información del usuario según su rol
            const endpoint = isAdmin 
                ? `https://apipris.kysedomi.lat/admin/${userId}` 
                : `https://apipris.kysedomi.lat/clients/${userId}`;
                
            const userResponse = await fetch(endpoint);
            
            if (userResponse.status === 200) {
                const userData = await userResponse.json();
                updateUserProfile(userData);
            } else {
                console.error('Failed to fetch user data');
                showLoginButton();
            }
        } catch (error) {
            console.error('Authentication check failed:', error);
            showLoginButton();
        }
    }
    
    // Actualizar perfil de usuario en la interfaz
    function updateUserProfile(userData) {
        const userName = document.getElementById('userName');
        const loginButton = document.getElementById('loginButton');
        const profileSection = document.getElementById('profileSection');
        
        // Extraer nombre del usuario
        const firstName = userData.user?.personal_data?.first_name || 'Usuario';
        const lastName = userData.user?.personal_data?.last_name || '';
        
        // Actualizar nombre en la interfaz
        userName.textContent = `${firstName} ${lastName}`;
        
        // Mostrar sección de perfil y ocultar botón de login
        loginButton.classList.add('hidden');
        profileSection.classList.remove('hidden');
    }
    
    // Mostrar botón de login y ocultar perfil
    function showLoginButton() {
        const loginButton = document.getElementById('loginButton');
        const profileSection = document.getElementById('profileSection');
        
        loginButton.classList.remove('hidden');
        profileSection.classList.add('hidden');
    }
    
    // Ejecutar verificación al cargar la página
    document.addEventListener('DOMContentLoaded', checkAuthentication);
    
    // Script para manejar el menú desplegable del perfil
    const profileButton = document.getElementById('profileButton');
    const profileMenu = document.getElementById('profileMenu');

    const loginButton = document.getElementById('loginButton');
    if (loginButton) {
        loginButton.addEventListener('click', (e) => {
            e.preventDefault();
            window.location.href = '/authenticate';
        });
    }
    
    if (profileButton && profileMenu) {
        profileButton.addEventListener('click', () => {
            profileMenu.classList.toggle('hidden');
        });
        
        // Cerrar el menú al hacer clic fuera de él
        document.addEventListener('click', (event) => {
            if (!profileButton.contains(event.target) && !profileMenu.contains(event.target)) {
                profileMenu.classList.add('hidden');
            }
        });
    }
    
    // Manejar cierre de sesión
    const logoutButton = document.getElementById('logoutButton');
    if (logoutButton) {
        logoutButton.addEventListener('click', (e) => {
            e.preventDefault();
            localStorage.removeItem('token');
            showLoginButton();
        });
    }
</script>
