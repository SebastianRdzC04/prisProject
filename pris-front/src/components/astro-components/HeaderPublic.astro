---
// Header.astro
import AppointmentModal from '../react-components/AppointmentModal';
import ButtonDate from '../react-components/components/ButtonDate';

// Inicialmente no sabemos si el usuario está autenticado
// Esto se verificará en el cliente mediante JavaScript
const isLoggedIn = false; 
---

<header class="w-full bg-white text-gray-800 shadow-lg fixed top-0 left-0">
    <div class="container mx-auto px-4 py-4">
        <div class="flex items-center justify-between">
            <div>
                <a href="/" class="text-3xl font-bold text-gray-800">
                    B I O R A
                </a>
            </div>
            <div class="flex items-center gap-4">
                <ButtonDate client:load />

                <!-- Indicador de carga -->
                <div id="loadingIndicator" class="flex items-center">
                    <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-gray-800"></div>
                    <span class="ml-2">Cargando...</span>
                </div>

                <!-- Botón de Iniciar sesión (se mostrará cuando no hay token) -->
                <button id="loginButton" class="hidden px-4 py-2 border border-gray-800 text-gray-800 rounded hover:bg-gray-100 transition-colors">
                    Iniciar sesión
                </button>
                
                <!-- Menú de perfil (se mostrará cuando hay token) -->
                <div id="profileSection" class="relative hidden ms-auto">
                    <button id="profileButton" class="flex items-center gap-2">
                        <span id="userName" class="text-gray-800 font-medium">Usuario</span>
                        <div class="flex items-center justify-center w-10 h-10 bg-gray-200 rounded-full hover:bg-gray-300 transition-colors">
                            <span class="text-gray-600">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z" />
                                </svg>
                            </span>
                        </div>
                    </button>
                    <div id="profileMenu" class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-10 hidden">
                        <a href="/perfil" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Mi perfil</a>
                        <a href="/my-cites" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Mis citas</a>
                        <hr class="my-1">
                        <a href="#" id="logoutButton" class="block px-4 py-2 text-sm text-red-600 hover:bg-gray-100">Cerrar sesión</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</header>

<script>
    import { 
        checkAuthentication, 
        isAdmin,
        logout 
    } from '../../scripts/security';

    // Elementos del DOM
    const loginButton = document.getElementById('loginButton');
    const profileSection = document.getElementById('profileSection');
    const loadingIndicator = document.getElementById('loadingIndicator');

    // Verificar autenticación desde localStorage
    async function verifyAndUpdateUI() {
        // Mostrar indicador de carga y ocultar los otros elementos
        showLoadingState();
        
        try {
            const userData = await checkAuthentication();
            
            if (!userData) {
                hideLoadingShowLogin();
                return;
            }
            
            if (isAdmin()) {
                console.log('usuario administrador');
                const profileMenuElement = document.getElementById('profileMenu');
                if (profileMenuElement) {
                    const separator = profileMenuElement.querySelector('hr');
                    if (separator) {
                        const dashboardLink = document.createElement('a');
                        dashboardLink.href = "/home";
                        dashboardLink.className = "block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100";
                        dashboardLink.textContent = "Dashboard";
                        profileMenuElement.insertBefore(dashboardLink, separator);
                    }
                }
            }
            
            hideLoadingShowProfile(userData);
        } catch (error) {
            console.error('Error verificando autenticación:', error);
            hideLoadingShowLogin();
        }
    }
    
    // Mostrar estado de carga
    function showLoadingState() {
        if (loadingIndicator) loadingIndicator.classList.remove('hidden');
        if (loginButton) loginButton.classList.add('hidden');
        if (profileSection) profileSection.classList.add('hidden');
    }
    
    // Ocultar carga y mostrar botón de login
    function hideLoadingShowLogin() {
        if (loadingIndicator) loadingIndicator.classList.add('hidden');
        if (loginButton) loginButton.classList.remove('hidden');
        if (profileSection) profileSection.classList.add('hidden');
    }
    
    // Ocultar carga y mostrar perfil
    function hideLoadingShowProfile(userData) {
        const userName = document.getElementById('userName');
        
        // Extraer nombre del usuario
        const firstName = userData.user?.personal_data?.first_name || 'Usuario';
        const lastName = userData.user?.personal_data?.last_name || '';
        
        // Actualizar nombre en la interfaz
        if (userName) userName.textContent = `${firstName} ${lastName}`;
        
        // Mostrar sección de perfil y ocultar otros elementos
        if (loadingIndicator) loadingIndicator.classList.add('hidden');
        if (loginButton) loginButton.classList.add('hidden');
        if (profileSection) profileSection.classList.remove('hidden');
    }
    
    // Ejecutar verificación al cargar la página
    document.addEventListener('DOMContentLoaded', verifyAndUpdateUI);
    
    // Script para manejar el menú desplegable del perfil
    const profileButton = document.getElementById('profileButton');
    const profileMenu = document.getElementById('profileMenu');

    if (loginButton) {
        loginButton.addEventListener('click', (e) => {
            e.preventDefault();
            window.location.href = '/authenticate';
        });
    }
    
    if (profileButton && profileMenu) {
        profileButton.addEventListener('click', () => {
            profileMenu.classList.toggle('hidden');
        });
        
        // Cerrar el menú al hacer clic fuera de él
        document.addEventListener('click', (event) => {
            if (!profileButton.contains(event.target) && !profileMenu.contains(event.target)) {
                profileMenu.classList.add('hidden');
            }
        });
    }
    
    // Manejar cierre de sesión
    const logoutButton = document.getElementById('logoutButton');
    if (logoutButton) {
        logoutButton.addEventListener('click', (e) => {
            e.preventDefault();
            logout();
            hideLoadingShowLogin();
        });
    }
</script>

